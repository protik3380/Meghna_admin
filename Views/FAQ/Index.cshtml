@using EFreshAdmin.Utility
@model EFreshAdmin.Models.EntityModels.FAQ
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var faqs = ViewBag.FAQS;
}
<head>
    <style>
        .error {
            color: red;
        }
    </style>
</head>

<section id="widget-grid" class="" style="margin-bottom: 5%">
    <div class="row" style="height: 100%">
        <article class="col-sm-12 col-md-12 col-lg-12">
            <div class="jarviswidget" id="wid-id-4" data-widget-editbutton="false" data-widget-custombutton="false">
                <header>
                    <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                    <h2 id="addFAQFormHeading">Add FAQ</h2>

                </header>
                <div>

                    <div class="widget-body no-padding">
                        @using (Html.BeginForm("Create", "FAQ", FormMethod.Post, new { id = "FAQForm", @class = "smart-form" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class='@TempData["Class"]' id="flashMessage" role="alert">@TempData["Message"]</div>
                            <fieldset>
                                <input type="hidden" id="FAQId" name="Id" />
                                <input type="hidden" id="FAQCreatedBy" name="CreatedBy" />
                                <input type="hidden" id="FAQCreatedOn" name="CreatedOn" />
                                @*@Html.LabelFor(m => m.Answer)<br/>
                                    @Html.TextAreaFor(m => m.Answer)
                                    @Html.ValidationMessageFor(m => m.Answer, "", new { @class = "error" })*@
                                <div class="row">

                                    <section class="col col-2">
                                        <label class="label">Question</label>
                                    </section>
                                    <section class="col col-10">
                                        <label class="textarea">
                                            @Html.TextAreaFor(model => model.Question)
                                            @*@Html.ValidationMessageFor(model => model.Question, "", new { @class = "text-danger" })*@
                                        </label>
                                    </section>

                                </div>
                                <div class="row">
                                    <section class="col col-2">
                                        <label class="label">Answer</label>
                                    </section>
                                    <section class="col col-10">
                                        <label class="textarea">
                                            @Html.TextAreaFor(model => model.Answer)
                                            @*@Html.ValidationMessageFor(m => m.Answer, "", new { @class = "text-danger" })*@
                                        </label>
                                    </section>

                                </div>
                                <div class="row">

                                    <section class="col col-2">
                                        <label class="label"></label>
                                    </section>
                                    <section class="col col-10">
                                        <label class="textarea">
                                            @Html.CheckBoxFor(model => model.IsActive, new { id = "FAQIsActive" })
                                            <i></i>Is Active?
                                        </label>
                                    </section>

                                </div>
                                <div class="row" style="margin-bottom: 5%">

                                </div>
                            </fieldset>
                            <footer style="bottom: 0">
                                <input type="button" value="Reset" id="FAQResetButton" class="btn btn-primary" />
                                <button type="submit" id="FAQAddButton" class="btn btn-primary">Add</button>
                            </footer>
                        }
                    </div>
                </div>
            </div>
        </article>
        <!-- END COL -->
    </div>
    <!-- END ROW -->
    <div class="row">
        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <div class="jarviswidget jarviswidget-color-darken" id="wid-id-0" data-widget-editbutton="false">
                <header>
                    <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                    <h2>FAQ List</h2>
                </header>
                <div>
                    <div class="widget-body no-padding">
                        <table id="dt_basic" class="table table-responsive">
                            <thead>
                                <tr>
                                    <th>SL</th>
                                    <th>Question</th>
                                    <th>Answer</th>
                                    <th>Is Active ?</th>
                                    <th style="text-align: center">Edit</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (faqs != null)
                                {
                                    var count = 1;
                                    foreach (var data in faqs)
                                    {
                                        <tr>
                                            <td style="width: 5%">@(count++)</td>

                                            <td style="width: 30%">@data.Question</td>
                                            <td style="width: 35%">@Html.Raw(data.Answer)</td>

                                            @{

                                                var color = data.IsActive ? "green" : "red";
                                                var activeStatus = data.IsActive ? "Yes" : "No";
                                                <td style="color: @color; width: 20%">
                                                    @activeStatus
                                                </td>
                                            }
                                            <td style="width: 10%;text-align: center">
                                                <input type="button" class="btn btn-success" onclick="changeFAQFormStateToEdit(@data.Id)" value="Edit" />
                                            </td>
                                        </tr>
                                                    }
                                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </article>
    </div>

</section>

@section Scripts{
    <script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/tinymce/tinymce.min.js"></script>

    @*@Scripts.Render("~/bundles/jqueryval")*@
    <script>
        $(document).ready(function () {

            setTimeout(function () {
                $("#flashMessage").hide('blind', {}, 500);
            },
                5000);

            $('#FAQIsActive').attr('checked', true);
        });
        //$("#FAQForm").validate({

        //    rules: {
        //        Question: "required",
        //        Answer: "required"

        //    },
        //    messages: {
        //        Question: "Please enter question",
        //        Answer: "Please enter answer"
        //    }
        //});

        tinymce.init({
            selector: "#Answer",
            browser_spellcheck: true,
            paste_data_images: true,
           

            toolbar1:
                "bold italic underline strikethrough | alignleft aligncenter alignright alignjustify | formatselect fontselect fontsizeselect",
            toolbar2:
                "cut copy paste | searchreplace | bullist numlist | outdent indent blockquote | undo redo | insertdatetime preview | forecolor backcolor",
            toolbar3:
                "table | hr removeformat | subscript superscript | charmap emoticons | ltr rtl | spellchecker",

            menubar: true,
            image_advtab: true,
            toolbar_items_size: 'small',
            height: '400px',
            setup: function (ed) {
                ed.on('change', function (e) {
                        //Validate tinyMCE on text change
                        tinyMCE.triggerSave();
                        $("#" + ed.id).valid();

                    }

                );
            },
            
            file_picker_callback: function (callback, value, meta) {
                if (meta.filetype === 'image') {
                    var inputFile = document.createElement("INPUT");
                    inputFile.setAttribute("type", "file");
                    inputFile.setAttribute("style", "display: none");
                    inputFile.click();
                    inputFile.addEventListener("change",
                        function () {
                            var file = this.files[0];
                            var reader = new FileReader();
                            reader.onload = function (e) {
                                callback(e.target.result,
                                    {
                                        alt: ''
                                    });
                            };
                            reader.readAsDataURL(file);
                        });
                }
            },

            insertdatetime_dateformat: "%d/%m/%Y",
            insertdatetime_timeformat: "%H:%M:%S"
            // language: 'pt_BR',
        });
        $(function() {
            var validator = $("#FAQForm").submit(function() {
                // update underlying textarea before submit validation
                //tinyMCE.triggerSave();
                console.log($('#Answer').text());
            }).validate({
                ignore: "",
                rules: {
                    Question: "required",
                    Answer: "required"
                },
                messages: {
                    Question: "Please enter question",
                    Answer: "Please enter answer"
                },
                errorPlacement: function(label, element) {
                    // position error label after generated textarea
                    if (element.is("#Answer")) {
                        label.insertAfter(element.next());
                    } else {
                        label.insertAfter(element);
                    }
                }
            });
            validator.focusInvalid = function() {
                // put focus on tinymce on submit validation
                if (this.settings.focusInvalid) {
                    try {
                        var toFocus = $(this.findLastActive() ||
                            this.errorList.length && this.errorList[0].element ||
                            []);
                        if (toFocus.is("#Answer")) {
                            tinyMCE.get(toFocus.attr("id")).focus();
                        } else {
                            toFocus.filter(":visible").focus();
                        }
                    } catch (e) {
                        // ignore IE throwing errors when focusing hidden elements
                    }
                }
            }
        });
        function changeFAQFormStateToEdit(faqId) {

            $(".field-validation-error").empty();
            $("#FAQForm").validate().resetForm();

            $("#preloader").css('display', 'block');

            // Scroll to the top of the form
            $('html, body').animate({
                scrollTop: $("#addFAQFormHeading").offset().top
            },
                500);

            // Change form state to edit
            $("#addFAQFormHeading").text("Update FAQ");
            $("#FAQAddButton").text("Update");
            $("#FAQForm").attr("action", "@BaseUrl.subDirectory/FAQ/Edit");
            $("#FAQId").val(faqId);

            var data = { faqId: faqId };
            $.ajax({
                method: 'POST',
                url: "@Url.Action("GetFAQDetailsById", "FAQ")",
                dataType: "json",
                contentType: 'application/json',
                data: JSON.stringify(data),
                crossDomain: true,
                success: function (data) {
                    toastr.clear();
                    if (data.Status === "Ok") {
                        var createdOnFormatedDate = "";
                        var createdOn = "";
                        if (data.FAQ.CreatedOn == null) {
                            createdOnFormatedDate = null;
                        } else {
                            createdOn = new Date(parseInt(data.FAQ.CreatedOn.substr(6)));
                            createdOnFormatedDate = createdOn.getFullYear() +
                                '-' +
                                ('0' + (createdOn.getMonth() + 1)).slice(-2) +
                                '-' +
                                ('0' + createdOn.getDate()).slice(-2) +
                                ' ' +
                                ('0' + createdOn.getHours()).slice(-2) +
                                ':' +
                                ('0' + (createdOn.getMinutes())).slice(-2) +
                                ':' +
                                ('0' + createdOn.getSeconds()).slice(-2);
                        }
                        var answer = data.FAQ.Answer;
                        $("#Question").val($.trim(data.FAQ.Question));
                        tinyMCE.activeEditor.setContent(answer);
                        //$("#Answer").val(answer);
                        $("#FAQCreatedOn").val(createdOnFormatedDate);
                        $("#FAQCreatedBy").val(data.FAQ.CreatedBy);
                        if (data.FAQ.IsActive === true) {
                            $("#FAQIsActive").prop('checked', true);
                        } else {
                            $("#FAQIsActive").prop('checked', false);
                        }
                    } else {
                        toastr.error("Something went wrong");
                    }

                },
                error: function () {
                    toastr.error("Something went wrong");
                }
            });
            $("#preloader").css('display', 'none');
        }

        $("#FAQResetButton").click(function () {

            $("#addFAQFormHeading").text("Add FAQ");
            $("#FAQAddButton").text("Add");
            $("#AddFAQForm").attr("action", "@BaseUrl.subDirectory/FAQ/Create");
            $("#Question").val("");
            //$("#Answer").val("");
            tinyMCE.activeEditor.setContent('');
            $("#FAQId").val("");
            $("#FAQCreatedBy").val("");
            $("#FAQIsActive").prop('checked', true);
            $(".field-validation-error").empty();

            $("#FAQForm").validate().resetForm();

        });


    </script>
}